To create a React application that displays a set of language cards, each of which flips to reveal additional information when clicked, follow these steps:

Step 1: Set Up Your Project
First, ensure you have a React project set up. You can use create-react-app to get started quickly if you haven't already.

Step 2: Organize Assets and Data
Ensure your image assets are located in the src/assets folder. Your data file should be src/data/assets.js.

src/data/assets.js

import css from '../assets/css.png';
import python from '../assets/python.png';
import java from '../assets/java.png';
import cpp from '../assets/cpp.png';
import go from '../assets/go.png';
import php from '../assets/php.png';
import javascript from '../assets/javascript.png';
import html from '../assets/html.png';

export const languages = [
  {
    name: "javascript",
    img: javascript,
    options: ["Website Development", "1995", "Brendan Eich"],
  },
  {
    name: "html",
    img: html,
    options: ["Website Development", "1993", "Tim Berners-Lee"],
  },
  {
    name: "css",
    img: css,
    options: ["Website Design", "1994", "HÃ¥kon Wium Lie"],
  },
  {
    name: "python",
    img: python,
    options: ["AI", "1980", "Guido van Rossum"],
  },
  {
    name: "java",
    img: java,
    options: ["BackEnd", "1990s", "Sun Microsystems"],
  },
  {
    name: "c++",
    img: cpp,
    options: ["Game Dev.", "1980s", "Bjarne Stroustrup"],
  },
  {
    name: "go",
    img: go,
    options: ["Network", "2009", "Robert Griesemer"],
  },
  {
    name: "php",
    img: php,
    options: ["BackEnd", "1995", "Rasmus Lerdorf"],
  },
];

Step 3: Create the Flippable Card Component
Create a new component FlippableCard.jsx that handles the flipping animation and state.

src/components/FlippableCard.jsx
import React, { useState } from 'react';
import './FlippableCard.css';

const FlippableCard = ({ image, name, options }) => {
  const [isFlipped, setIsFlipped] = useState(false);

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
  };

  return (
    <div className={`flip-card ${isFlipped ? 'flipped' : ''}`} onClick={handleFlip}>
      <div className="flip-card-inner">
        <div className="flip-card-front">
          <img src={image} alt={name} />
        </div>
        <div className="flip-card-back">
          <h3>{name}</h3>
          <ul>
            {options.map((option, index) => (
              <li key={index}>{option}</li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default FlippableCard;

Step 4: Add CSS for Flipping Effect
Create a CSS file FlippableCard.css to style the flipping animation.

src/components/FlippableCard.css
.flip-card {
  background-color: transparent;
  perspective: 1000px;
  width: 200px;
  height: 260px;
  cursor: pointer;
  margin: 20px;
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.6s;
  transform-style: preserve-3d;
}

.flip-card.flipped .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front,
.flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden; /* Safari */
}

.flip-card-front {
  background-color: #fff;
  color: black;
}

.flip-card-back {
  background-color: #ddd;
  color: black;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

Step 5: Create the Card Component
Create a parent component Card.jsx that renders a list of FlippableCard components using the data.

src/components/Card.jsx
import React from 'react';
import { languages } from '../data/assets';
import FlippableCard from './FlippableCard';
import './Card.css';

const Card = () => {
  return (
    <div className="card-container">
      {languages.map((language, index) => (
        <FlippableCard
          key={index}
          image={language.img}
          name={language.name}
          options={language.options}
        />
      ))}
    </div>
  );
};

export default Card;

Step 6: Add CSS for Card Container
Create a CSS file Card.css to style the card container.

src/components/Card.css

.card-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  padding: 20px;
}

Step 7: Use the Card Component in App.js
Finally, import and use the Card component in your App.js.

src/App.js
import React from 'react';
import Card from './components/Card';
import './App.css';

function App() {
  return (
    <div className="App">
      <h1>Programming Languages</h1>
      <Card />
    </div>
  );
}

export default App;

Step 8: Ensure Your App Styles Are Properly Applied
Add any necessary global styles in App.css.

src/App.css
.App {
  text-align: center;
  font-family: Arial, sans-serif;
}

h1 {
  margin: 20px;
}










